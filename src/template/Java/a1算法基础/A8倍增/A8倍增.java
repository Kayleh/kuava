/*
 *  $ codeforce  2022-08-31
 *
 *  Copyright 2022  Kayleh. All rights reserved.
 *  @see {@link https://github.com/Kayleh/kuava}
 *
 */

package template.Java.a1算法基础.A8倍增;

/**
 * 倍增法（英语：binary lifting），顾名思义就是翻倍。它能够使线性的处理转化为对数级的处理，大大地优化时间复杂度。
 * <p>
 * 这个方法在很多算法中均有应用，其中最常用的是 RMQ 问题和求 LCA（最近公共祖先）。
 */
public class A8倍增 {


    /**
     * e.g.
     * 如何用尽可能少的砝码称量出 [0,31]之间的所有重量？（只能在天平的一端放砝码）
     *
     * 答案是使用 1 2 4 8 16 这五个砝码。
     * 同样，如果要称量[0,127]之间的所有重量，可以使用 1 2 4 8 16 32 64 这七个砝码。
     * 每次我们都选择 2 的整次幂作砝码的重量，就可以使用极少的砝码个数量出任意我们所需要的重量。
     *
     * 为什么说是极少呢？因为如果我们要量出[0,1023]之间的所有重量，只需要 10 个砝码，需要量出[0,1048575]之间的所有重量，只需要 20 个。
     * 如果我们的目标重量翻倍，砝码个数只需要增加 1。这叫“对数级”的增长速度，因为砝码的所需个数与目标重量的范围的对数成正比。
     */
}
